/**
 * Utility function ro get the browser details (name & version).
 *
 * get_browser function uses User Agent string to detect browsers and their
 * version.
 */
(function ($) {
  Drupal.rotaryBrowserAlert = Drupal.rotaryBrowserAlert || {};
  Drupal.rotaryBrowserAlert.getBrowser = function() {
    // Match User Agent string with browser names.
    var ua = navigator.userAgent,tem,M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

    // Match "trident" for IE.
    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return {name:'MSIE',version:(tem[1]||'')};
    }
    if (M[1] === 'Chrome') {
      // Match for Opera.
      tem = ua.match(/\bOPR\/(\d+)/)
      if (tem != null) {
        return {
          name:'Opera',
          version:tem[1]
        };
      }
      // Match for Edge.
      tem = ua.match(/\bEdge\/(\d+)/)
      if (tem != null) {
        return {
          name:'Edge',
          version:tem[1]
        };
      }
    }
    if (M[1] === 'Safari') {
      if ((tem = ua.match(/version\/(\d+)/i)) != null) {
        // Detect safari for iOS.
        if (ua.match(/iPad/i) || ua.match(/iPhone/i)) {
          return {
            name:'SafariIOS',
            version:tem[1]
          };
        }
        else {
          return {
            name:'SafariMac',
            version:tem[1]
          };
        }
      }
    }
    M = M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) {
      M.splice(1,1,tem[1]);
    }
    return {
      name: M[0],
      version: M[1]
    };
  }
})(jQuery);
